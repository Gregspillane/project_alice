services:
  frontend:
    build:
      context: ./alice_frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT_DOCKER}"
    depends_on:
      backend:
        condition: service_healthy
      workflow:
        condition: service_healthy
    volumes:
      - ./alice_frontend:/app:delegated
      - /app/node_modules
      - ./.env:/app/.env
      - type: bind
        source: ./shared-uploads
        target: /app/shared-uploads
      - type: bind
        source: ./logs
        target: /app/logs
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT_DOCKER}"
    depends_on:
      mongo:
        condition: service_started
    volumes:
      - ./.env:/app/.env
      - ./backend:/app
      - /app/node_modules
      - type: bind
        source: ./shared-uploads
        target: /app/shared-uploads
      - type: bind
        source: ./logs
        target: /app/logs
    environment:
      NODE_ENV: ${NODE_ENV:-development}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT_DOCKER}/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  mongo:
    image: mongo:latest
    ports:
      - "26017:27017"
    volumes:
      - mongo_data:/data/db

  workflow:
    build:
      context: ./workflow_logic
    ports:
      - "${WORKFLOW_PORT}:${WORKFLOW_PORT_DOCKER}"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - type: bind
        source: ./shared-uploads
        target: /app/shared-uploads
      - type: bind
        source: ./logs
        target: /app/logs

    depends_on:
      backend:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - HOST=host.docker.internal
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${WORKFLOW_PORT_DOCKER}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

volumes:
  shared-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared-uploads
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/logs
  mongo_data: